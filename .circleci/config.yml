# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  aws-eks: circleci/aws-eks@1.1.0
  kubernetes: circleci/kubernetes@0.11.2

jobs:
   lint:
      docker:
         - image: python:3.7.3-stretch
      steps:
         - checkout
         - run:
            name: Make install
            command: |
               cd docker-nginx
               make install
         - run:
            name: Lint dockerfile and html
            command: |
               cd docker-nginx
               make lint
   build:
      machine: true
      steps:
         - checkout
         - run: |
            cd docker-nginx
            docker build -t dtbnpp/capstone-project:capstone  .
        # deploy the image to the DockerHub
         - run: |
            echo "$DOCKERHUB_PASSWORD" | docker login --username "$DOCKERHUB_USERNAME" --password-stdin
            docker push dtbnpp/capstone-project:capstone
   create_network:
      docker:
         - image: amazon/aws-cli
      steps:
         - checkout
         - run:
            name: Ensure network infrastructure exist
            command: |
               cd iaac
               aws cloudformation deploy \
               --template-file network.yml \
               --tags project=${ENVIRONMENT_NAME}-Project6 \
               --stack-name capstoneNETWORK-${CIRCLE_WORKFLOW_ID} \
               --region us-east-1 \
               --parameter-overrides file://network-params.json
              
   create_cluster:
      docker:
         - image: amazon/aws-cli
      steps:
         - checkout
         - run:
            name: Create Amazon EKS Cluster
            command: |
               cd iaac
               aws cloudformation deploy \
               --template-file kube-cluster.yml \
               --tags project=${ENVIRONMENT_NAME}-Project6 \
               --stack-name capstoneEKSCluster-${CIRCLE_WORKFLOW_ID} \
               --parameter-overrides file://kube-cluster-params.json \
               --region us-east-1 \
               --capabilities CAPABILITY_NAMED_IAM
            no_output_timeout: 15m

   create_nodes:
      docker:
         - image: amazon/aws-cli
      steps:
         - checkout
         - run:
            name: Attach nodes to the Amazon EKS Cluster
            command: |
               cd iaac
               aws cloudformation deploy \
               --template-file nodes.yml \
               --tags project=${ENVIRONMENT_NAME}-Project6 \
               --stack-name capstoneEKSNodes-${CIRCLE_WORKFLOW_ID} \
               --parameter-overrides file://nodes-params.json \
               --region us-east-1 \
               --capabilities CAPABILITY_NAMED_IAM
            # fix Too long with no output
            no_output_timeout: 15m

   create_ec2s:
      docker:
         - image: amazon/aws-cli
      steps:
         - checkout
         - run:
            name: Create EC2 instances
            command: |
               cd iaac
               aws cloudformation deploy \
               --template-file ec2.yml \
               --tags project=${ENVIRONMENT_NAME}-Project6 \
               --stack-name capstoneEC2Instances-${CIRCLE_WORKFLOW_ID} \
               --region us-east-1 \
               --parameter-overrides file://ec2-params.json

   create_deployment:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: /home/circleci/project/.circleci/deployment-and-service.yml
          resource-name: deployment/capstone-nginx

   create_test:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          capstone-nginx
        type: string
    steps:
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          name: Test cluster
          command: |
            kubectl get svc
            kubectl get pods
            kubectl describe pods
            kubectl get nodes
            kubectl get deployment
            kubectl describe service capstone-nginx
            kubectl get services -o wide

   update_deployment:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: /home/circleci/project/.circleci/deployment-and-servicev2.yml
          resource-name: deployment/capstone-nginx
      - run:
         command: |
            kubectl rollout status deployment capstone-nginx
            kubectl get deployment capstone-nginx

workflows:
  capstone:
    jobs:
      - lint
      - build:
            requires: [lint]
      - create_network:
            requires: [build]
      - create_cluster:
            requires: [create_network]
      - create_nodes:
            requires: [create_cluster]
      - create_ec2s:
            requires: [create_nodes]
      - create_deployment:
            cluster-name: ProjectCapstone-ekscluster
            requires: [create_ec2s]
      - create_test:
            cluster-name: ProjectCapstone-ekscluster
            requires: [create_ec2s]
      #- update_deployment:
         #cluster-name: ProjectCapstone-ekscluster